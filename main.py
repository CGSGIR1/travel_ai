import telebot
import os.path
from telebot import types
import gis, settings
from testik import GptAnswer
from ModelLoad import GigachatStart, AIResponse
from CreateEmbeddings import CreateEmbeddings
import logging

logging.basicConfig(level=logging.INFO)
bot = telebot.TeleBot(settings.telebot_token)
active_sessions = dict()
CreateEmbeddings()
GigaChat, GigaRet = GigachatStart()
logging.info("–ì–∏–≥–∞–ß–∞—Ç –∑–∞–≥—Ä—É–∑–∏–ª–∏")

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç")
    btnGuide = types.KeyboardButton("–ü–æ–æ–±—â–∞—Ç—å—Å—è —Å –≥–∏–¥–æ–º")
    markup.add(btnGuide)
    markup.add(btn1)
    active_sessions[message.chat.id] = 0
    bot.send_message(message.chat.id,
                     text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤".format(
                         message.from_user), reply_markup=markup)


@bot.message_handler(content_types=['text'])
def func(message):
    global active_sessions
    try:
        zashita = active_sessions[message.chat.id]
    except:
        active_sessions[message.chat.id] = 0
    if (message.text == "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç"):
        hideBoard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn3 = types.KeyboardButton("–ü—Ä—è–º–æ–π")
        btn4 = types.KeyboardButton("–≠–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–π")
        hideBoard.add(btn3, btn4)
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞:", reply_markup=hideBoard)
    elif (message.text == "–ü–æ–æ–±—â–∞—Ç—å—Å—è —Å –≥–∏–¥–æ–º"):
        hideBoard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        mainMenuBtn = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüì±")
        hideBoard.add(mainMenuBtn)
        bot.send_message(message.chat.id,
                         text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø —Ä–∞–¥–∞, —á—Ç–æ –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å –º–æ–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏. –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?")
    elif (message.text == "–ü—Ä—è–º–æ–π"):
        active_sessions[message.chat.id] = 1
        hideBoard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüì±")
        hideBoard.add(btn3)
        bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è -> –ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è",
                         reply_markup=hideBoard)
    elif (message.text == "–≠–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–π"):
        active_sessions[message.chat.id] = 2
        hideBoard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn3 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüì±")
        hideBoard.add(btn3)
        bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è -> –ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è",
                         reply_markup=hideBoard, parse_mode='MARKDOWN')
    elif (message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüì±"):
        active_sessions[message.chat.id] = 0
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç")
        btnGuide = types.KeyboardButton("–ü–æ–æ–±—â–∞—Ç—å—Å—è —Å –≥–∏–¥–æ–º")
        markup.add(btnGuide)
        markup.add(btn1)
        bot.send_message(message.chat.id,
                         text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤".format(
                             message.from_user), reply_markup=markup, parse_mode='MARKDOWN')
    elif active_sessions[message.chat.id] == 1:
        s = str(message.text)
        try:
            s2 = list(map(str, s.split("->")))
            link = gis.getLink(s2[1:], s2[0])
            bot.send_message(message.chat.id,
                             text=settings.makeLink(link), parse_mode="HTML")
            active_sessions[message.chat.id] = 0
        except Exception as e:
            logging.error(e)
            bot.send_message(message.chat.id,
                             text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞".format(
                                 message.from_user))
    elif active_sessions[message.chat.id] == 2:
        s = str(message.text)
        try:
            s2 = list(map(str, s.split("->")))
            attractions = []
            for i in range(1, len(s2)):
                answer = AIResponse(s2[i], GigaChat, GigaRet)
                attractions = attractions + gis.split(s2[i], answer)
            link = gis.getLink(attractions, s2[0])
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btnGuide = types.KeyboardButton("–ü–æ–æ–±—â–∞—Ç—å—Å—è —Å –≥–∏–¥–æ–º")
            markup.add(btnGuide)
            bot.send_message(message.chat.id,
                             text=settings.makeLink(link), parse_mode="HTML", reply_markup=markup)
            active_sessions[message.chat.id] = 0
            # markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            # btnGuide = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–∏—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö")
            # markup.add(btnGuide)
            # bot.send_message(message.chat.id,
            #                  text="".format(
            #                      message.from_user), reply_markup=markup)
        except Exception as e:
            logging.error(e)
            bot.send_message(message.chat.id,
                             text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞".format(
                                 message.from_user))
    else:
        s = str(message.text)
        bot.send_message(message.chat.id,
                         text=GptAnswer(s).format(
                             message.from_user))


bot.polling(none_stop=True)